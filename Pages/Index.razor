@page "/{UrlMessage?}"
@using System
@using System.Text
@using System.Security.Cryptography
@using System.IO
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavigationManager

<div class=festive-images-container>
    <img alt="Lovely festive image of Colin and Laura" src="/img/us/1.jpg" style="animation-delay:10s">
    <img alt="Lovely festive image of Colin and Laura 2" src="/img/us/2.jpg" style="animation-delay:5s">
    <img alt="Lovely festive image of Colin and Laura 3" src="/img/us/3.jpg">
    <div class=cover></div>
</div>

<p class=message>@DisplayMessage</p>

@if (ShowEncryptor)
{
    <textarea placeholder="Enter message" @oninput="OnMessageInput" />

    <a href="/@(EncryptedMessage)">@EncryptedMessage</a>
}

@code {
    [Parameter]
    public string UrlMessage { get; set; }

    public string DisplayMessage { get; set; }

    public bool ShowEncryptor { get; set; }

    public string EncryptedMessage { get; set; }

    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(this.UrlMessage))
        {
            this.DisplayMessage = "Hello";
        }
        else
        {
            this.DisplayMessage = Decrypt(this.UrlMessage);
        }

        var query = new Uri(NavigationManager.Uri).Query;
        if (QueryHelpers.ParseQuery(query).TryGetValue("write", out var value))
        {
            this.ShowEncryptor = true;
        }
    }

    private void OnMessageInput(ChangeEventArgs e)
    {
        this.EncryptedMessage = Uri.EscapeDataString(Encrypt(e.Value.ToString()));
    }

    // Really doesn't matter that this is public/silly
    public static readonly byte[] DefaultCryptographicKey = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };
    public static readonly byte[] DefaultCryptographicInitializationVector = {101 ,102, 103, 104, 105, 106, 107, 108, 109,
        110, 111, 112, 113, 114, 115, 116};

    public static String Encrypt(string plainTextString)
    {
        using var cryptographicAlgorithm = Aes.Create();
        using var encryptor = cryptographicAlgorithm.CreateEncryptor(DefaultCryptographicKey,
            DefaultCryptographicInitializationVector);

        var encryptMemoryStream = new MemoryStream();
        using (var encryptCryptoStream = new CryptoStream(encryptMemoryStream, encryptor, CryptoStreamMode.Write))
        {
            var plainTextByte = Encoding.UTF8.GetBytes(plainTextString);
            encryptCryptoStream.Write(plainTextByte, 0, plainTextByte.Length);
        }

        return Convert.ToBase64String(encryptMemoryStream.ToArray());
    }

    public static String Decrypt(string cipherTextString)
    {
        using var cryptographicAlgorithm = Aes.Create();
        using var decryptor = cryptographicAlgorithm.CreateDecryptor(DefaultCryptographicKey,
            DefaultCryptographicInitializationVector);

        var decryptMemoryStream = new MemoryStream();
        using (var decryptCryptoStream = new CryptoStream(decryptMemoryStream, decryptor, CryptoStreamMode.Write))
        {
            var cipherTextByte = Convert.FromBase64String(cipherTextString);
            decryptCryptoStream.Write(cipherTextByte, 0, cipherTextByte.Length);
        }

        return Encoding.UTF8.GetString(decryptMemoryStream.ToArray());
    }
}
